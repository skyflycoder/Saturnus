peer.discovery = {

    # if peer discovery is on
    # the discovery protocol will be used to find other nodes and connect them
    # if peer discovery is off
    # this peer will only be connecting to the peers from [peer.active] list
    # inbound connections from other peers are accepted as well
    enabled = true

    # List of the seed peers to start
    # the search for online peers
    # values: [ip:port, enode://nodeid@ip:port, ip:port ...]
    ip.list = [

    ]

    # external IP/hostname which is reported as our host during discovery
    # if not set, the service http://checkip.amazonaws.com is used
    # the last resort is to get the peer.bind.ip address
    external.ip = null

    # Local network adapter IP to which
    # the discovery UDP socket is bound
    # e.g: 192.168.1.104
    #
    # if the value is empty it will be retrieved
    # by punching to some known address e.g: www.google.com
    bind.ip = ""

    # indicates whether the discovery will include own home node
    # within the list of neighbor nodes
    public.home.node = true

    # indicates if the discovered nodes and their reputations
    # are stored in DB and persisted between VM restarts
    persist = true

    # the period in seconds with which the discovery
    # tries to reconnect to successful nodes
    # 0 means the nodes are not reconnected
    touchPeriod = 600

    # the maximum nuber of nodes to reconnect to
    # -1 for unlimited
    touchMaxNodes = 100

    # number of workers that
    # test the peers for being
    # online [1..10]
    workers = 8
}

peer {
    # Port on which ethereumj will listen
    # for incoming connections
    listen.port = 40335

    # Network id
    networkId = 555

    # Private key of the peer
    # The key is generated by default on the first run and stored in the database folder
    # If you have your own peer ID, specify its private key here
    # derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
     privateKey = ca0f7e42f3361ae77306aa26572ba5ed8c9fd1d77712edbc99c053803303e137

    # Boot node list
    active = [
        {
            url = "enode://07245d7acf73de82143246eba79e36186abbbebfbe806fa1a440d60c1a996e23ded44199db921c51eb3e615989342b6258367e851bb0d591920ad6ae7ea65d4a@localhost:41335"
        }
        # Sample entries:
        # { url = "enode://<hex nodeID>@hostname.com:30303" }
        # {
        #    ip = hostname.com
        #    port = 30303
        #    nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
        # }
    ]

    # list of trusted peers from which incoming connections are always accepted
    trusted = [
        # Sample entries:
        # {nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"},
        # {ip = "11.22.33.44"},
        # {ip = "11.22.33.*"},
        # {
        #   nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"
        #   ip = "11.22.33.44"
        # }
    ]

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropped with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    maxActivePeers = 30

    # The protocols supported by peer
    # can be: [eth, shh, bzz]
    capabilities = [eth]

    # connection timeout for trying to
    # connect to a peer [seconds]
    connection.timeout = 2

    # how much time [seconds]
    # we will wait for a message
    # to arrive before closing the channel
    channel.read.timeout = 30

    p2p {
        # the default version outbound connections are made with
        # inbound connections are made with the version declared by the remote peer (if supported)
        # version = 4

        # max frame size in bytes when framing is enabled
        framing.maxSize = 32768

        # forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }
}

# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run on
genesis = sample-genesis.json

# path to genesis file
# has priority over `genesis` option
# genesisFile = /some/path/to/frontier.json

# Blockchain settings (constants and algorithms) which are
# not described in the genesis file (like MINIMUM_DIFFICULTY or Mining algorithm)
# The possible named presets are:
# - main : the main network (Frontier-Homestead-...)
# - ropsten: Ropsten test network
# - testnet: Ethercamp test network
# - olympic: pre-Frontier Olympic network
# For custom network settings please refer to 'blockchain.config.class'
blockchain.config.name = "main"

# This is a more advanced replacement for 'blockchain.config.name'
# Here the exact org.ethereum.config.BlockchainForkConfig implementation
# class name can be specified.
# Only one of two options (this and above) can be defined.
#blockchain.config.class = "org.ethereum.config.fork.MainForkConfig"

database {
    # place to save physical storage files
    # can be either absolute or relative path
    dir = sampleDB-1

    # every time the application starts
    # the existing database will be
    # destroyed and all the data will be
    # downloaded from peers again [true/false]
    reset = false

    # If reset=true, every time the application
    # starts the database will reset itself to
    # this block number and sync again from there.
    # Set to 0 for a 'full' reset.
    resetBlock = 0

    # every time the application starts
    # existing database will be restored from latest backup
    # this option is supported by RocksDB only
    fromBackup = false

    # handling incompatible database version:
    #  * EXIT   - (default) show error in std out and exit by throwing Error
    #  * RESET  - clear database directory and continue working
    #  * IGNORE - continue working regardless possible issues
    # @since 1.4.0
    incompatibleDatabaseBehavior = EXIT

    # controls state database pruning
    # pruned state consumes much less disk space (e.g. 50G full and 1G pruned)
    # but the state can be restored only within last [maxDepth] blocks, all older
    # states are lost
    prune {
        enabled = true

        # controls how much last block states are not pruned
        # it is not recommneded to set this value below 192
        # as it can prevent rebranching from long fork chains
        #
        # NOTE: the bigger this value is the larger memory footprint pruning has,
        # here are some milstones to get the idea of how large it can be:
        #       192: 10 Mb
        #     1_000: 16 Mb
        #    10_000: 58 Mb
        #   100_000: 718 Mb
        # 1_000_000: 5658 Mb
        maxDepth = 192
    }

    # defines a number of opened files by db instance
    # this number has significant impact on read amplification
    # on the other hand it can force exceeding of user's limit,
    # OS usually set it to 1024 for all applications
    maxOpenFiles = 512
}

# Cache settings
cache {

    flush {
        # size in Mbytes of the write buffer for all datasources (state, blocks, transactions)
        # data is flushed to DB when write caches size exceeds this limit
        # value < 0 disables this option
        writeCacheSize = 64

        # force data flush each N blocks
        # [10000 flush each 10000 blocks]
        # value 0 disables this option
        blocks = 1

        # flush each block after full (long) sync complete
        shortSyncFlush = true
    }

    # total size in Mbytes of the state DB read cache
    stateCacheSize = 384

    # the size of block queue cache to be imported in MBytes
    blockQueueSize = 32

    # the size of header queue cache during import in MBytes
    headerQueueSize = 8

    # maximum size (in Mb) the state bloom fiter can grow up to
    # when reaching this threshold the bloom filter
    # is turned off forever
    # 128M can manage approx up to 50M of db entries
    # DEPRECATED, states source is no more backed with bloom filter
    maxStateBloomSize = 128
}

# eth sync process
sync {

    # block chain synchronization
    # can be: [true/false]
    enabled = true

    # Fast sync options
    fast {

        # enables/disables fastsync
        # when enabling make sure the global sync option is enabled ('sync.enabled')
        enabled = false

        # when specified the fastsync retrieves the state for this block
        # this is the fast and secure option to do fastsync
        # if not specified the block is selected like [peerBestBlockNumber - 1000]
        //        pivotBlockHash = 6149ddfd7f52b2aa34a65b15ae117c269b5ff2dc58aa839dd015790553269411

        # create a backup when the state has been downloaded
        # this option is supported by RocksDB only
        backupState = false

        # skip bodies and receipts downloading for blocks prior to pivot
        # this option doesn't affect block headers
        skipHistory = false
    }

    # minimal peers count
    # used in sync process
    # sync may use more peers
    # than this value
    # but will try to get
    # at least this many from discovery
    peer.count = 30

    # Uncomment this param
    # to use a strict Eth version.
    # Useful for testing
    # version = 62

    # exit if we receive a block that causes state conflict
    # this option is mainly for debugging purposes
    exitOnBlockConflict = false

    # Make long sync done (switch to short sync) in XX seconds
    # if all known blocks already downloaded.
    # Useful in private networks where auto-switch could fail.
    # Recommended value for private networks: 60 (seconds)
    makeDoneByTimeout = -1
}

# miner options
mine {

    # start mining blocks
    # when 'sync.enabled' is true the mining starts when the sync is complete
    # else the mining will start immediately, taking the best block from database
    # (or genesis if no blocks exist yet)
    start = false

    # number of CPU threads the miner will mine on
    # 0 disables CPU mining
    cpuMineThreads = 2

    # there two options for CPU mining 'light' and 'full'
    # 'light' requires only 16M of RAM but is much slower
    # 'full' requires 1G of RAM and possibly ~7min for the DataSet generation
    #   but is much faster during mining
    fullDataSet = true

    # mining beneficiary
    coinbase = "169d59da0a5e26cc9e34e47fcfaaa72f94e16bec"

    # extra data included in the mined block
    # one of two properties should be specified
    extraData = "cccccccccccccccccccc"
    #extraDataHex = "0102abcd"

    # transactions with the gas price lower than this will not be
    # included in mined blocks
    # decimal number in weis
    minGasPrice = 1000000000  # 1 Gwei

    # minimal timeout between mined blocks
    minBlockTimeoutMsec = 0

    # start mining with specific nonce (might be useful for testing)
    # null for random start nonce
    startNonce = null
}

# Solidity options
solc {
    # Full path to solc executable
    # If path is not provided, bundled Solidity Compiler is used
    path = null
}

# ========================================================
#    Debug and advanced options
# ========================================================

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 15

# the number of blocks that should pass
# before a pending transaction is removed
transaction.outdated.threshold = 10

dump {
  # for testing purposes
  # all the state will be dumped
  # in JSON form to [dump.dir]
  # if [dump.full] = true
  # possible values [true/false]
  full = false
  dir = dmp

  # This defines the vmtrace dump
  # to the console and the style
  # -1 for no block trace
  # styles: [pretty/standard+] (default: standard+)
  block = -1
  style = pretty

  # clean the dump dir each start
  clean.on.restart = true
}

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured {
  trace = false
  dir = vmtrace
  compressed = true
  initStorageLimit = 10000
}

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# enables/disables internal transactions data record
# a single transaction can potentially collect large amount
# of call data (especially in tests) so there is an option to disable it
record.internal.transactions.data = true

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for debug purposes
# so if you don't know exactly how
# to apply it, leave it as [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# Key value data source values: [rocksdb/leveldb/inmem]
# 'leveldb' option is meant to be DEPRECATED
keyvalue.datasource = rocksdb

record.blocks=false
blockchain.only=false

# Load the blocks
# from a rlp lines
# file and not for
# the net
blocks.loader=""

#crypto settings, such as sign, hash, etc
crypto {
	#JCA cryptoprovider name. 
	providerName="SC"
	#Used for create JCA MessageDigest
	hash.alg256="ETH-KECCAK-256"
	hash.alg512="ETH-KECCAK-512"
}

dpos{
    # milliseconds
    block.produce.interval=5000
    #the index in test.accounts
    candidate.me.index=1
    #candidates are accounts[0],...accounts[candidate.cnt - 1]
    candidate.cnt=2
    accounts = [
        #privateKey:address:nodeId
        "7f4448d6e1bc6b91007d31ff0f69bce2c70a362aef78b25f2137b29bb9cb5e80:03ffc831275160235e275be8bd69c4e8e2799dfe:07245d7acf73de82143246eba79e36186abbbebfbe806fa1a440d60c1a996e23ded44199db921c51eb3e615989342b6258367e851bb0d591920ad6ae7ea65d4a",
        "ca0f7e42f3361ae77306aa26572ba5ed8c9fd1d77712edbc99c053803303e137:169d59da0a5e26cc9e34e47fcfaaa72f94e16bec:19fee230d599d2edbe6e9f96f26a1485a9ff84f220294cf6f5e996a0ebea30fb9166111513466918dd6b8ada79c87d81375b7f6da70e3d937ceb9f0aac1e8384",
        "f8ff037dbbcde5696a3bb917ee5af9d0a3e6c649fd9e15c32b603785b7b8f127:201d52e5c26312167ee966df6374cb59e0c875f1:2133b0d49c2a97ac5314f96bd9aa4c63dcfae7be64f5d202911b5814fcae106c7d3aa3cefa2c95a9286246ca4587701ad4ab11a675cbb0980b2f722510e04ad8",
        "eff56962c573623280d21d08a1db9aa206d46dc590fc95caf7401f7ba2fdddc3:333923005f0911d412c92abb8571be0ff397677a:306253ccb83346c08a4cbfc232108032dce7ddefcc5844e37a75bf137ba726d3ae9e4bf2312d4283c693b31f5719e17222956b1ca01001d4ac2fff64fec8646e",
        "2e0e0dd5c5955797b364a5b81e242e1a8fa054eb327dbe43d9d64908db6ed763:43d5464099a7f194dcd2c381ebed46c8fc575938:4553c27a1805e85426531b41dd644f907a234501fa61ceced50ba1033141675d89acb1647c73feec20a11313ddf2850dcd6cef313fd9b2581e1d79f1bfed7f5e",
        "debb6f865ef0d9065352c8eca7cd1a0c5deb26a291d29c400ba5dfe3413544d7:5f3d62efceef38469acd06ff30aa8238389d6ad2:5840ab259f3a5b16949c745f5e7909b83fa387f2596f5844959961ba3a039d06f54c1d864d0a11de84b553bd532c108bc2959457700f39ba41f5f028d3cf7d6d",
        "447078cc6226c99fa59aec8dd06e8838b67b020bc66815237a268e5606fdd1aa:6f4b505258d7b1e18662b19326a0a5635b53aa18:6998d33a76d7af3ff45547f0749a1c6b8bf75d26fd790e1fed8e6d49c7b9641da449d9f95a66d2547b1b8f57095d2df46c03cc15e18955d14aca9639e11a9a5e",
        "298c9c80c1457597ee65438736b4365d364a7e1191a4c29aaf8544fe70cd7346:711b68a6a07bfb6215f8945cfd3b8b55ad47fe6b:7b4a28485281858d2c266727001aa1061b417116ce24e2d127035511bf71db36178b957a2e8d2df8462cc750432aca817de7a7e75d7f928e723474cc6cc92124",
        "ab90803a4abc6d65d147566125f6b62e402f51cb39b488ccf0163c8732ab2e33:89a0cf4f3d541719627b5ff56095b004453cf59b:8fde712178ac768f2ca61c744053a41bd6fce2500dad756cf3329a1a75ef219bb9796deec47c416e64f58279153a982b5b7cb862b951848365d741ebaf4b7b11",
        "2ddadcd4033bde3454f37ec61d572a3efc6e45d01a10de1356057668ae01faa0:9c6fc3cb64d46aa976d9ded80102e9d4f261db9f:9a0c4477e02a95b315898f955d3f52a96d2b8cec1bfcd304c12b15fa0cc26f69f270cbddc27db1ffca774e1075993af79dd04837068cd5efe63c1046bd2dc42a",
        "8cef6228244425eae6fea31c36a3685db0ba958fc51d7f85cd9fdea6ce5d9db4:ae74b6242a45d8953a2b2863f47c8bfa4ff42938:a8c28c0fe578d76ba05fd4ea80377edfea4f07f220e944b51853b3bb702f63637e92ad15774ee5220cf232c69f4fc4b9dfab93e83d77284440d44c839e54f363",
        "ff0de0469fbc30b3af11480e3c090d283a6076429bd8fceec5c002c1086e17cd:ba3ed1b4ad12abe3fcc0a2a0a411c06d3637e1e3:b0ea885119aa9a02d6667668dd42d36bb8f75721f7112432dc6c088ddc5f765d1a5f82f2a43f6baa716625b63517aa4f5ed44dffe67309ba02f16307a534067d",
        "9834daed8f84055b4368feed9770204b1a647c7a9601ccea2c4e43c4a7639353:c0982ac157b41386929e204e77c4533506889f71:ceac7fb61adc65e793a50c330ae8600fae3ec0bb7841bbdb8abfb2fd1bc51d4e5a62bb16c70f430156906b37540c822fdfd274e7d00da1a182c1b412f2d174e5",
        "144dd397494541be26c7926df0e063e59c2ebdf98f959968f2392597bf51c819:db1eb84100b5a278ed7fe24433745888c4ab225d:da532f7399c3e2a621f5c4956584c4f4115d3a32b24e009e4bfa483179e278db79719d19f757f128c5e04a77ef880bc3149c1de2cd9f7987179e002621455804",
        "949fa2e854ea4e4ad97e1d51d5b4122606eaf5bc641783d067e9dfd1e6ab2825:e243aef29e7a72b47b1c88224f6d418ad3ff9f5d:e12fcb36a5d6338ce3684e842f440b239c12091c6238c85af2a1f68656a91e5af6f89f3448bdc6106a673624a623c9daebe8dca66e64eebbeb9abc63b106be39",
        "334a116e485d500f9c074a1709313292d7442517cf996fea4bab2f58f5889ced:fe4ccf0907045117db958ca7aa612d4cb5dc75ab:fbb8d3c714f0bfe3afb25906f025881c5ae8b379f9e0e4a39420701c1f8d8d1d45e13fa4518c4ad542c51484c54bcdeaeb117aee468f37099c23e58b04b7fa77"
    ]
    hosts=[
        "127.0.0.1:33001",
        "127.0.0.1:33002",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0",
        "0.0.0.0:0"
    ]
}




